import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import FSInputFile, BufferedInputFile, Message, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from qr_utils import extract_qrs_from_image
from image_utils import create_result_images
import os
import cv2
from config import API_TOKEN

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_data = {}
user_media_message_ids = {}
user_cancel_flags = {}

USERS_FILE = 'users.txt'

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–∑–∞–º–µ–Ω–∏ 123456789 –Ω–∞ —Å–≤–æ–π user_id)
ADMINS = {437656500,390887899,5319622027}
# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö user_id, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—ã–ª –∫–æ–Ω—Ç–∞–∫—Ç
all_user_ids = set()

# –ó–∞–≥—Ä—É–∑–∫–∞ user_id –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if os.path.exists(USERS_FILE):
    with open(USERS_FILE, 'r', encoding='utf-8') as f:
        for line in f:
            uid = line.strip()
            if uid.isdigit():
                all_user_ids.add(int(uid))

def save_user_id(user_id):
    if user_id not in all_user_ids:
        with open(USERS_FILE, 'a', encoding='utf-8') as f:
            f.write(f'{user_id}\n')

@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–∞–º–∏ –Ω–∞ –ª–∏—Å—Ç–µ –ê4.")

@dp.message(Command('cancel'))
async def cancel_handler(message: Message):
    user_cancel_flags[message.from_user.id] = True
    await message.answer("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

@dp.message(lambda m: m.photo or m.document)
async def handle_photo(message: Message, bot: Bot):
    orig_path = 'input.jpg'
    user_cancel_flags[message.from_user.id] = False
    if message.photo:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_path = file.file_path
        file_bytes = await bot.download_file(file_path)
        with open(orig_path, 'wb') as f:
            f.write(file_bytes.read())
    elif message.document:
        file = await bot.get_file(message.document.file_id)
        file_path = file.file_path
        file_bytes = await bot.download_file(file_path)
        ext = os.path.splitext(message.document.file_name)[-1].lower()
        save_path = 'input' + ext
        with open(save_path, 'wb') as f:
            f.write(file_bytes.read())
        if ext in ['.jpg', '.jpeg']:
            orig_path = save_path
        else:
            if os.path.exists('input.jpg'):
                os.remove('input.jpg')
            os.rename(save_path, 'input.jpg')
            orig_path = 'input.jpg'
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.")
        return
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è + –∫–Ω–æ–ø–∫–∞ Cancel
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="Cancel", callback_data="cancel_scan"))
    await message.answer("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤ –Ω–∞—á–∞–ª–æ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... üïë", reply_markup=builder.as_markup())
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –æ—Ç–º–µ–Ω—É
    await scan_with_cancel(message, orig_path)

async def scan_with_cancel(message: Message, orig_path: str):
    user_id = message.from_user.id
    loop = asyncio.get_event_loop()
    qrs = await loop.run_in_executor(None, extract_qrs_from_image, orig_path)
    if user_cancel_flags.get(user_id):
        await message.answer("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return
    if not qrs:
        await message.answer("QR-–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑.")
        return
    if any(qr['data'] is None for qr in qrs):
        await message.answer("–ù–µ –≤—Å–µ QR-–∫–æ–¥—ã —á–∏—Ç–∞—é—Ç—Å—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑.")
        return
    await message.answer(f"–ù–∞–π–¥–µ–Ω–æ QR-–∫–æ–¥–æ–≤: {len(qrs)}. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞.")

    # –†–∏—Å—É–µ–º –∑–µ–ª—ë–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–æ—Ç–æ
    img = cv2.imread(orig_path)
    for qr in qrs:
        rect = qr['rect']
        if rect and all(isinstance(x, int) for x in rect):
            x, y, w, h = rect
            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 4)
    cv2.imwrite('input_with_qr.jpg', img)
    with open('input_with_qr.jpg', 'rb') as f:
        await message.answer_photo(BufferedInputFile(f.read(), filename='input_with_qr.jpg'), caption='–ò—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ QR-–∫–æ–¥–∞–º–∏ (–∑–µ–ª—ë–Ω—ã–º)')

    images = create_result_images(qrs)
    user_data[message.from_user.id] = images
    await send_images(message, images, 0)

async def send_images(message: Message, images, page, user_id=None):
    if user_id is None:
        user_id = message.from_user.id
    batch = images[page*10:(page+1)*10]
    media = []
    for img_path in batch:
        with open(img_path, 'rb') as f:
            img_bytes = f.read()
            media.append(InputMediaPhoto(media=BufferedInputFile(img_bytes, filename=os.path.basename(img_path))))
    if media:
        prev_ids = user_media_message_ids.get(user_id, [])
        for mid in prev_ids:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=mid)
            except Exception:
                pass
        sent = await message.answer_media_group(media)
        user_media_message_ids[user_id] = [m.message_id for m in sent]
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        builder = InlineKeyboardBuilder()
        if page > 0:
            builder.add(InlineKeyboardButton(text="Back", callback_data=f"back_{page-1}"))
        if len(images) > (page+1)*10:
            builder.add(InlineKeyboardButton(text="Next", callback_data=f"next_{page+1}"))
        builder.add(InlineKeyboardButton(text="Clear", callback_data="clear"))
        await message.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data and (c.data.startswith('next_') or c.data.startswith('back_') or c.data == 'clear' or c.data == 'cancel_scan'))
async def process_callback_nav(callback: CallbackQuery):
    user_id = callback.from_user.id
    if callback.data.startswith('next_'):
        page = int(callback.data.split('_')[1])
        images = user_data.get(user_id, [])
        await send_images(callback.message, images, page, user_id=user_id)
        await callback.answer()
    elif callback.data.startswith('back_'):
        page = int(callback.data.split('_')[1])
        images = user_data.get(user_id, [])
        await send_images(callback.message, images, page, user_id=user_id)
        await callback.answer()
    elif callback.data == 'clear':
        user_data.pop(user_id, None)
        user_media_message_ids.pop(user_id, None)
        await callback.message.answer("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤.")
        await callback.answer("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    elif callback.data == 'cancel_scan':
        user_cancel_flags[callback.from_user.id] = True
        await callback.message.answer("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        await callback.answer("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@dp.message(~Command('message'))
async def track_user(message: Message):
    user_id = message.from_user.id
    if user_id not in all_user_ids:
        all_user_ids.add(user_id)
        save_user_id(user_id)
    # –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –±–æ–ª—å—à–µ –Ω–µ –º–µ—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /message

@dp.message(Command('message'))
async def broadcast_handler(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    text = message.text[len('/message'):].strip()
    if not text:
        await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /message —Ç–µ–∫—Å—Ç_—Ä–∞—Å—Å—ã–ª–∫–∏')
        return
    count = 0
    for uid in all_user_ids:
        try:
            await bot.send_message(uid, text)
            count += 1
        except Exception:
            pass
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.')

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main()) 